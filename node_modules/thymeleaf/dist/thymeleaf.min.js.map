{"version":3,"file":"thymeleaf.min.js","sources":["../source/parser/Rule.js","../node_modules/@ultraq/array-utils/array-utils.js","../node_modules/@ultraq/object-utils/object-utils.js","../node_modules/@ultraq/string-utils/string-utils.js","../source/utilities/Dom.js","../source/standard/expressions/AllInput.js","../source/parser/Grammar.js","../source/parser/Operators.js","../source/parser/InputBuffer.js","../source/standard/expressions/ThymeleafExpressionLanguage.js","../source/parser/RegularExpression.js","../source/parser/Parser.js","../source/standard/expressions/ExpressionProcessor.js","../source/processors/AttributeProcessor.js","../source/standard/processors/AttrAttributeProcessor.js","../source/standard/processors/CheckedAttributeProcessor.js","../source/standard/processors/ClassAppendAttributeProcessor.js","../source/standard/processors/EachAttributeProcessor.js","../source/standard/processors/EmptyableAttributeProcessor.js","../source/standard/processors/FragmentAttributeProcessor.js","../source/standard/processors/IfAttributeProcessor.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/babel-runtime/regenerator/index.js","../node_modules/dumb-query-selector/dumb-query-selector.js","../source/standard/processors/InsertAttributeProcessor.js","../source/standard/processors/RemovableAttributeProcessor.js","../source/standard/processors/TextAttributeProcessor.js","../source/standard/processors/UTextAttributeProcessor.js","../source/dialects/Dialect.js","../source/standard/StandardDialect.js","../source/Configurations.js","../source/processors/Matcher.js","../source/TemplateEngine.js"],"sourcesContent":["/*\n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Default processor which returns the result as is.\n * \n * @template T\n * @param {T} result\n * @return {T}\n */\nfunction defaultMatchProcessor(result) {\n\treturn result;\n}\n\n/**\n * A rule describes a string in the language.\n * \n * @author Emanuel Rabina\n */\nexport default class Rule {\n\n\t/**\n\t * @param {String} name\n\t * @param {Object} expression\n\t * @param {Function} [matchProcessor=defaultExpressionAction]\n\t */\n\tconstructor(name, expression, matchProcessor = defaultMatchProcessor) {\n\n\t\tthis.name           = name;\n\t\tthis.expression     = expression;\n\t\tthis.matchProcessor = matchProcessor;\n\t}\n\n\t/**\n\t * Given an input string and a parser, return whether or not the input is\n\t * accepted by this rule.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Parser} parser\n\t * @return {Object} If the input is accepted, this will be the non-null result\n\t *   of matching against the rule.\n\t */\n\taccept(input, parser) {\n\n\t\tlet matchResult = parser.parseWithExpression(input, this.expression);\n\t\treturn matchResult !== null ? this.matchProcessor(matchResult) : null;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Flattens an arrays of arrays into a single array.\n * \n * @param {Array} array\n * @return {Array} Flattened array.\n */\nexport function flatten(array) {\n\n\treturn array.reduce((accumulator, value) => {\n\t\treturn accumulator.concat(Array.isArray(value) ? flatten(value) : value);\n\t}, []);\n}\n\n/**\n * Creates an array of numbers from the starting value (inclusive) to the end\n * (exclusive), with an optional step (the gap between values).\n * \n * @param {Number} start\n *   The value to start at, the first item in the returned array.\n * @param {Number} end\n *   The value to end with, the last item in the returned array.\n * @param {Number} [step=1]\n *   The increment/gap between values, defaults to 1.\n * @return {Array} An array encompassing the given range.\n */\nexport function range(start, end, step = 1) {\n\n\treturn Array.apply(0, Array(Math.ceil((end - start) / step))).map((empty, index) => index * step + start);\n}\n\n/**\n * Remove and return the first item from `array` that matches the predicate\n * function.\n * \n * @param {Array} array\n * @param {Function} predicate\n *   Invoked with the array item.\n * @return {Object} The matching item, or `null` if no match was found.\n */\nexport function remove(array, predicate) {\n\n\treturn array.find((item, index) => {\n\t\tif (predicate(item)) {\n\t\t\tarray.splice(index, 1);\n\t\t\treturn item;\n\t\t}\n\t});\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Deep-merges all of the properties of the objects in `sources` with `target`,\n * modifying the target object and returning it.\n * \n * @param {Object} target\n * @param {...Object} sources\n * @return {Object} The modified target object.\n */\nexport function merge(target = {}, ...sources) {\n\n\tsources.forEach(source => {\n\t\tif (source) {\n\t\t\tObject.keys(source).forEach(key => {\n\t\t\t\tlet targetValue = target[key];\n\t\t\t\tlet sourceValue = source[key];\n\t\t\t\ttarget[key] = targetValue instanceof Object && sourceValue instanceof Object ?\n\t\t\t\t\tmerge(targetValue, sourceValue) :\n\t\t\t\t\tsourceValue;\n\t\t\t});\n\t\t}\n\t});\n\treturn target;\n}\n\n/**\n * Returns a value from an object via a path string that describes the nesting\n * of objects to get to the value.\n * \n * eg:\n * \n * ```\n * let object = {\n *   greeting: {\n *     message: 'Hello!'\n *   }\n * };\n * let pathToMessage = 'greeting.message';\n * ```\n * \n * @param {Object} object\n * @param {String} path A dot-separated string of paths to get to the desired\n *   value within the object\n * @return {Object} The value at the given path within the object, or\n *   `undefined` if the path doesn't resolve within the object.\n */\nexport function navigate(object, path) {\n\n\treturn path.split('.').reduce((previousValue, pathToken) => {\n\t\treturn previousValue && previousValue[pathToken];\n\t}, object);\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Escapes special HTML characters in a string with their entity code\n * equivalents.\n * \n * @param {String} string\n * @return {String}\n *   HTML escaped string, safe for use in HTML.\n */\nexport function escapeHtml(string) {\n\n\treturn typeof string !== 'string' ? string : string\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&#039;');\n}\n\n/**\n * Returns the replacement of each placeholder in a template string with a\n * corresponding replacement value.\n * \n * @param {String} template\n * @param {...String} values\n *   Argument list of values or a single array of values.\n * @return {String}\n *   Replaced template string.\n */\nexport function format(template, ...values) {\n\n\treturn template.replace(/\\{(\\d+)\\}/g, (match, index) => values[+index] + '');\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global ENVIRONMENT */\n\n/**\n * Removes all of an element's child nodes.\n * \n * @param {Element} element\n */\nexport function clearChildren(element) {\n\twhile (element.firstChild) {\n\t\telement.removeChild(element.firstChild);\n\t}\n}\n\n/**\n * Sets a Thymeleaf attribute and value on an existing element.  Used primarily\n * in tests.\n * \n * @param {Element} element\n * @param {String} attribute\n * @param {String} value\n * @return {Element} The same element but with the attribute and value set on it.\n */\nexport function createThymeleafAttributeValue(element, attribute, value) {\n\telement.setAttribute(attribute, value);\n\treturn element;\n}\n\n/**\n * Use either JSDOM or the browser's native DOM parsing to deserialize the HTML\n * string into a document fragment.\n * \n * @param {String} htmlString\n * @return {DocumentFragment}\n */\nexport function deserialize(htmlString) {\n\treturn ENVIRONMENT === 'browser' ?\n\t\t/* istanbul ignore next */\n\t\tdocument.createRange().createContextualFragment(htmlString) :\n\t\trequire('jsdom').jsdom(htmlString, {\n\t\t\tfeatures: {\n\t\t\t\tFetchExternalResources: false,\n\t\t\t\tProcessExternalResources: false\n\t\t\t}\n\t\t});\n}\n\n/**\n * Use either JSDOM or the browser's native DOM serialization to serialize a\n * document fragment into an HTML string.\n * \n * @param {DocumentFragment} documentFragment\n * @return {String}\n */\nexport function serialize(documentFragment) {\n\treturn ENVIRONMENT === 'browser' ?\n\t\t/* istanbul ignore next */\n\t\tnew XMLSerializer().serializeToString(documentFragment) :\n\t\trequire('jsdom').serializeDocument(documentFragment);\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A special kind of expression that requires the referenced rule consume all\n * available input.\n * \n * @param {String} ruleName\n * @return {Matchable}\n */\nexport const AllInput = ruleName => (input, parser) => {\n\tlet matchResult = parser.parseWithExpression(input, ruleName);\n\treturn matchResult !== null && input.exhausted() ? matchResult : null;\n};\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A collection of Rules that describes a language.\n * \n * @author Emanuel Rabina\n */\nexport default class Grammar {\n\n\t/**\n\t * @param {String} name\n\t * @param {Rule} startingRule\n\t * @param {...Rule} additionalRules\n\t */\n\tconstructor(name, startingRule, ...additionalRules) {\n\n\t\tthis.name = name;\n\t\tthis.rules = [].concat(startingRule, additionalRules);\n\t}\n\n\t/**\n\t * Given an input string and a parser, return whether or not the input is\n\t * accepted by this grammar.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Parser} parser\n\t * @return {Object} If the input is accepted, this will be the non-null result\n\t *   of matching against the rules of this grammar.\n\t */\n\taccept(input, parser) {\n\n\t\treturn this.startingRule.accept(input, parser);\n\t}\n\n\t/**\n\t * Return the rule that has the given name.\n\t * \n\t * @param {String} name\n\t * @return {Rule}\n\t */\n\tfindRuleByName(name) {\n\n\t\tlet rule = this.rules.find(rule => rule.name === name);\n\t\tif (!rule) {\n\t\t\tthrow new Error(`Failed to find a rule named \"${name}\" in the grammar`);\n\t\t}\n\t\treturn rule;\n\t}\n\n\t/**\n\t * Returns the grammar's starting rule.\n\t * \n\t * @return {Rule}\n\t */\n\tget startingRule() {\n\n\t\treturn this.rules[0];\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an expression function where the underlying expression doesn't need\n * to be matched.  Thus, optional expressions \"always\" match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const Optional = expression => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet result = parser.parseWithExpression(input, expression);\n\t\treturn result !== null ? result : '';\n\t});\n};\n\n/**\n * Returns an expression function where the expression must be matched against\n * at least once to be considered a match.\n * \n * @param {Matchable} expression\n * @return {Matchable}\n */\nexport const OneOrMore = (expression) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\twhile (true) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result) {\n\t\t\t\tresults.push(result);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn results.length > 0 ? results : null;\n\t});\n};\n\n/**\n * Returns an expression function where only one of the underlying expressions\n * must be matched in order to consider the expression a match.\n * \n * @param {...Matchable} expressions\n * @return {Matchable}\n */\nexport const OrderedChoice = (...expressions) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tfor (let expression of expressions) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result !== null) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t});\n};\n\n/**\n * Returns an expression whose underlying expressions must be matched in order\n * to consider the entire expression a match.\n * \n * @param {...Matchable} expressions\n * @return {Matchable}\n */\nexport const Sequence = (...expressions) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet results = [];\n\t\tfor (let expression of expressions) {\n\t\t\tlet result = input.markAndClearOrReset(() => {\n\t\t\t\treturn parser.parseWithExpression(input, expression);\n\t\t\t});\n\t\t\tif (result === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tresults.push(result);\n\t\t}\n\t\treturn results;\n\t});\n};\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Wrapper around the string being parsed, with a position that keeps track of\n * what part of the imput is currently being read/tested.\n * \n * @author Emanuel Rabina\n */\nexport default class InputBuffer {\n\n\t/**\n\t * @private\n\t * @type {Number}\n\t */\n\tposition = 0;\n\n\t/**\n\t * @private\n\t * @type {Array<Number>}\n\t */\n\tpositionStack = [];\n\n\t/**\n\t * @param {String} input\n\t */\n\tconstructor(input) {\n\n\t\tthis.input = input;\n\t}\n\n\t/**\n\t * Clear the previously {@link #mark}ed position.\n\t */\n\tclear() {\n\n\t\tlet lastPosition = this.positionStack.pop();\n\t\tif (lastPosition === undefined) {\n\t\t\tthrow new Error('Called clear() but no matching mark()');\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether or not the current position is at the end of the input,\n\t * meaning we've exhausted the entire input string.\n\t * \n\t * @return {Boolean}\n\t */\n\texhausted() {\n\n\t\treturn this.position === this.input.length;\n\t}\n\n\t/**\n\t * Sets a mark at the current position so that it can be returned to by a\n\t * matching {@link #reset} call.\n\t */\n\tmark() {\n\n\t\tthis.positionStack.push(this.position);\n\t}\n\n\t/**\n\t * Convenience method for surrounding a function with a call to {@link #mark},\n\t * then {@link #clear} if the result of the function is non-null, or\n\t * {@link #reset} if `null`.\n\t * \n\t * @template T\n\t * @param {Function<T>} func\n\t * @return {T}\n\t */\n\tmarkAndClearOrReset(func) {\n\n\t\tthis.mark();\n\t\tlet result = func();\n\t\tif (result !== null) {\n\t\t\tthis.clear();\n\t\t\treturn result;\n\t\t}\n\t\tthis.reset();\n\t\treturn null;\n\t}\n\n\t/**\n\t * Reads as many characters from the current position as satisfies the given\n\t * pattern, returning the read characters and advancing the mark by as many\n\t * characters.\n\t * \n\t * @param {RegExp} pattern\n\t * @return {Array} The array of matched strings, or `null` if the pattern\n\t *   didn't match.\n\t */\n\tread(pattern) {\n\n\t\tlet remaining = this.input.substring(this.position);\n\t\tlet leadingWhitespace = remaining.match(/^\\s+/);\n\t\tif (leadingWhitespace) {\n\t\t\tleadingWhitespace = leadingWhitespace[0];\n\t\t\tremaining = remaining.substring(leadingWhitespace.length);\n\t\t}\n\t\tlet result = new RegExp(pattern.source).exec(remaining);\n\t\tif (result) {\n\t\t\tlet [value] = result;\n\t\t\tif (remaining.startsWith(value)) {\n\t\t\t\tthis.position += (value.length + (leadingWhitespace ? leadingWhitespace.length : 0));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Revert to the last @{link #mark}ed position.\n\t */\n\treset() {\n\n\t\tlet newPosition = this.positionStack.pop();\n\t\tif (newPosition === undefined) {\n\t\t\tthrow new Error('Called reset() but no matching mark()');\n\t\t}\n\t\tthis.position = newPosition;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AllInput}          from './AllInput';\nimport ExpressionProcessor from './ExpressionProcessor';\nimport Grammar             from '../../parser/Grammar';\nimport {Optional,\n\tOneOrMore,\n\tOrderedChoice,\n\tSequence}                from '../../parser/Operators';\nimport {RegularExpression} from '../../parser/RegularExpression';\nimport Rule                from '../../parser/Rule';\n\nimport {remove}   from '@ultraq/array-utils';\nimport {navigate} from '@ultraq/object-utils';\n\n/**\n * Grammar for the Thymeleaf expression language.  Describes the language and\n * how to parse it.\n * \n * @author Emanuel Rabina\n */\nexport default new Grammar('Thymeleaf Expression Language',\n\n\t// Ordered as at https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax\n\tnew Rule('ThymeleafExpression',\n\t\tOrderedChoice(\n\t\t\tAllInput('VariableExpression'),\n\t\t\tAllInput('LinkExpression'),\n\t\t\tAllInput('FragmentExpression'),\n\t\t\tAllInput('Iteration'),\n\t\t\tAllInput('StringConcatenation'),\n\t\t\tAllInput('Literal'),\n\t\t\tAllInput('LogicalExpression'),\n\t\t\tAllInput('IfThenCondition'),\n\t\t\tAllInput('IfThenElseCondition'),\n\t\t\tAllInput('Nothing')\n\t\t)\n\t),\n\n\n\t// Simple expressions\n\t// ==================\n\n\t/**\n\t * Variable expressions, `${variable}`.  Represents a value to be retrieved\n\t * from the current context.\n\t */\n\tnew Rule('VariableExpression',\n\t\tSequence(/\\${/, 'Identifier', /\\}/),\n\t\t([, identifier]) => context => {\n\t\t\tlet result = navigate(context, identifier);\n\t\t\treturn result !== null && result !== undefined ? result : '';\n\t\t}\n\t),\n\n\t/**\n\t * Link expressions, `@{url(parameters)}`.  Used for generating URLs out of\n\t * context parameters.\n\t */\n\tnew Rule('LinkExpression',\n\t\tRegularExpression(/^@\\{(.+?)(\\(.+\\))?\\}$/, ['Url', 'UrlParameters']),\n\t\t([, url, parameters]) => context => {\n\n\t\t\tif (parameters) {\n\n\t\t\t\t// TODO: Push this parsing of the parameters list back into the grammar\n\t\t\t\tlet expressionProcessor = new ExpressionProcessor(context);\n\t\t\t\tlet paramsList = parameters.slice(1, -1).split(',').map(param => {\n\t\t\t\t\tlet [lhs, rhs] = param.split('=');\n\t\t\t\t\treturn [lhs, expressionProcessor.process(rhs)];\n\t\t\t\t});\n\n\t\t\t\t// Fill out any placeholders in the URL from the parameters\n\t\t\t\twhile (true) { // eslint-disable-line\n\t\t\t\t\tlet urlTemplate = /(.*?)\\{(.+?)\\}(.*)/.exec(url);\n\t\t\t\t\tif (urlTemplate) {\n\t\t\t\t\t\tlet [, head, placeholder, tail] = urlTemplate;\n\t\t\t\t\t\tlet paramEntry = remove(paramsList, ([lhs]) => lhs === placeholder);\n\t\t\t\t\t\tif (paramEntry) {\n\t\t\t\t\t\t\turl = `${head}${paramEntry[1]}${tail}`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Remaining parameters become search query parameters\n\t\t\t\tif (paramsList.length) {\n\t\t\t\t\turl += `?${paramsList.map(([key, value]) => `${key}=${value}`).join('&')}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn url;\n\t\t}\n\t),\n\tnew Rule('Url', /.+/),\n\tnew Rule('UrlParameters', /\\((.+)\\)/),\n\n\t/**\n\t * Fragment expressions, `~{template :: fragment(parameters)}`.  A locator for\n\t * a piece of HTML in the same or another template.\n\t */\n\tnew Rule('FragmentExpression',\n\t\tSequence(/~{/, 'TemplateName', /::/, 'FragmentName', 'FragmentParameters', /}/),\n\t\t([, templateName, , fragmentName, parameters]) => () => {\n\n\t\t\t// TODO: Should executing a fragment expression locate and return the\n\t\t\t//       fragment?  If so, then it'll make expression execution\n\t\t\t//       asynchronous!\n\t\t\treturn {\n\t\t\t\ttemplateName,\n\t\t\t\tfragmentName,\n\t\t\t\tparameters\n\t\t\t};\n\t\t}\n\t),\n\tnew Rule('TemplateName', /[\\w-._]+/),\n\tnew Rule('FragmentName', /[\\w-._]+/),\n\n\t// TODO: We're not doing anything with these yet\n\tnew Rule('FragmentParameters',\n\t\tOptional(/\\(.+\\)/)\n\t),\n\n\n\t// Complex expressions\n\t// ===================\n\n\t/**\n\t * Iteration, `localVar : ${collection}`.  The name of the variable for each\n\t * loop, followed by the collection being iterated over.\n\t */\n\tnew Rule('Iteration',\n\t\tSequence('Identifier', Optional(Sequence(/,/, 'Identifier')), /:/, 'VariableExpression'),\n\t\t([localValueName, [, iterationStatusVariable], , collectionExpressionAction]) => context => ({\n\t\t\tlocalValueName,\n\t\t\titerable: collectionExpressionAction(context),\n\t\t\titerationStatusVariable\n\t\t})\n\t),\n\n\t/**\n\t * String concatenation, `'...' + '...'` or even `${...} + ${...}`, the\n\t * joining of 2 expressions by way of the `+` operator.\n\t */\n\tnew Rule('StringConcatenation',\n\t\tSequence('Concatenatable', OneOrMore(Sequence(/\\+/, 'Concatenatable'))),\n\t\t([first, [...rest]]) => context => {\n\t\t\tconst coerce = value => typeof value === 'function' ? value(context) : value.toString();\n\t\t\treturn coerce(first) + rest.reduce((result, [, item]) => result + coerce(item), '');\n\t\t}\n\t),\n\tnew Rule('Concatenatable',\n\t\tOrderedChoice(\n\t\t\t'StringLiteral',\n\t\t\t'VariableExpression'\n\t\t)\n\t),\n\n\n\t// Literals\n\t// ========\n\n\tnew Rule('Literal',\n\t\tOrderedChoice(\n\t\t\t'StringLiteral',\n\t\t\t'NumberLiteral',\n\t\t\t'BooleanLiteral',\n\t\t\t'NullLiteral',\n\t\t\t'TokenLiteral'\n\t\t)\n\t),\n\n\t/**\n\t * String literal, characters surrounded by `'` (single quotes).\n\t */\n\tnew Rule('StringLiteral', /'.*?'/, result => () => result.slice(1, -1)),\n\n\t/**\n\t * A number.\n\t */\n\tnew Rule('NumberLiteral', /\\d+(\\.\\d+)?/, result => () => parseFloat(result)),\n\n\t/**\n\t * One of `true` or `false`.\n\t */\n\tnew Rule('BooleanLiteral', /(true|false)/, result => () => result === 'true'),\n\n\t/**\n\t * The word `null` to represent the null value.\n\t */\n\t// TODO: The parser uses null to mean 'failed parse', so this might not work?\n\tnew Rule('NullLiteral', /null/, () => () => null),\n\n\t/**\n\t * A token literal, which is pretty much anything else that can't be categorized\n\t * by the other literal types.  This is often used as a fallback in the\n\t * expression language so that, for any unknown input, we're still returning\n\t * something.\n\t */\n\t// TODO: Is this the same as an Identifier?\n\tnew Rule('TokenLiteral', /[^: ${}]+/, result => () => result),\n\n\n\t// Text operations\n\t// ===============\n\n\n\t// Arithmetic operations\n\t// =====================\n\n\n\t// Boolean operations\n\t// ==================\n\n\n\t// Comparisons and equality\n\t// ========================\n\n\t/**\n\t * A logical expression is any expression that resolves in a `true`/`false`\n\t * value.\n\t */\n\tnew Rule('LogicalExpression',\n\t\tSequence('Operand', 'Comparator', 'Operand'),\n\t\t([leftOperand, comparator, rightOperand]) => context => {\n\t\t\tlet lhs = leftOperand(context);\n\t\t\tlet rhs = rightOperand(context);\n\t\t\tswitch (comparator) {\n\t\t\t\tcase '==':  return lhs == rhs;\n\t\t\t\tcase '===': return lhs === rhs;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t),\n\n\tnew Rule('Comparator',\n\t\tOrderedChoice(\n\t\t\t/===?/\n\t\t)\n\t),\n\n\n\t// Conditional operators\n\t// =====================\n\n\t/**\n\t * If-then condition, `if ? then`.  This is the truthy branch only of the\n\t * classic ternary operator.  The falsey branch is a no-op.\n\t */\n\tnew Rule('IfThenCondition',\n\t\tSequence('Condition', /\\?/, 'Operand'),\n\t\t([condition, , truthyExpression]) => context => {\n\t\t\treturn condition(context) ? truthyExpression(context) : undefined;\n\t\t}\n\t),\n\n\t/**\n\t * If-then-else condition, `if ? then : else`, the classic ternary operator.\n\t */\n\tnew Rule('IfThenElseCondition',\n\t\tSequence('Condition', /\\?/, 'Operand', /:/, 'Operand'),\n\t\t([condition, , truthyExpression, , falseyExpression]) => context => {\n\t\t\treturn condition(context) ? truthyExpression(context) : falseyExpression(context);\n\t\t}\n\t),\n\n\t/**\n\t * A condition is some expression or value that resolves to a true/false\n\t * value.\n\t */\n\tnew Rule('Condition',\n\t\tOrderedChoice(\n\t\t\t'LogicalExpression',\n\t\t\t'Operand'\n\t\t)\n\t),\n\n\n\t// Special tokens\n\t// ==============\n\n\t/**\n\t * An expression that matches the empty string.\n\t */\n\tnew Rule('Nothing', /^$/),\n\n\n\t// Common language basics\n\t// ======================\n\n\tnew Rule('Identifier', /[a-zA-Z_][\\w.]*/),\n\n\t/**\n\t * An operand is either a variable or a literal.\n\t */\n\tnew Rule('Operand',\n\t\tOrderedChoice(\n\t\t\t'VariableExpression',\n\t\t\t'Literal'\n\t\t)\n\t)\n);\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport InputBuffer from './InputBuffer';\n\n/**\n * A special kind of expression that understands matched portions of regular\n * expressions to run processing over, which may lead to additional parsing\n * expressions.\n * \n * This expression should be used sparingly as the regexes within need to take\n * care of whitespace between tokens themselves, which can be annoying.\n * \n * @param {RegExp} expression\n * @param {Array<Matchable>} matchers\n * @return {Matchable}\n */\nexport const RegularExpression = (expression, matchers) => (input, parser) => {\n\treturn input.markAndClearOrReset(() => {\n\t\tlet result = input.read(expression);\n\t\tif (result) {\n\t\t\tlet parseResults = [result[0]];\n\t\t\tfor (let i = 1; i < result.length; i++) {\n\t\t\t\tlet match = result[i];\n\t\t\t\tif (match !== undefined) {\n\t\t\t\t\tlet parseResult = parser.parseWithExpression(new InputBuffer(match), matchers[i - 1]);\n\t\t\t\t\tif (parseResult === null) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tparseResults.push(parseResult);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn parseResults;\n\t\t}\n\t\treturn null;\n\t});\n};\n","/*\n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport InputBuffer from './InputBuffer';\n\n/**\n * Any one of the objects that can be matched:\n *  - an expression function\n *  - a string that references another rule\n *  - a regular expression\n * \n * @typedef {String|RegExp|Function} Matchable\n */\n\n/**\n * A recursive descent parser for any parsing expression grammar defined by the\n * constructs in this module.\n * \n * TODO: Own module?\n * \n * @author Emanuel Rabina\n */\nexport default class Parser {\n\n\t/**\n\t * @param {Grammar} grammar\n\t */\n\tconstructor(grammar) {\n\n\t\tthis.grammar = grammar;\n\t}\n\n\t/**\n\t * Parse a string, attempting to build the parse tree defined by the rules in\n\t * the configured grammar.  Parsing is considered successful when there are no\n\t * more non-terminating symbols in the grammar and all of the input has been\n\t * read.\n\t * \n\t * @param {String} input\n\t * @return {Object} The parse tree if the input could be parsed, `null`\n\t *   otherwise.\n\t */\n\tparse(input) {\n\n\t\tlet inputBuffer = new InputBuffer(input);\n\t\tlet matchResult = this.grammar.accept(inputBuffer, this);\n\t\tif (matchResult === null || !inputBuffer.exhausted()) {\n\t\t\tlet errorMessage = `Failed to parse \"${input}\"`;\n\n\t\t\t// Don't bring down the thread if we can't parse\n\t\t\tif (process.env.NODE_ENV === 'production') {\n\t\t\t\tconsole.error(errorMessage);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(errorMessage);\n\t\t\t}\n\t\t}\n\t\treturn matchResult;\n\t}\n\n\t/**\n\t * Parse the input against the given expression.  An expression can either be\n\t * a reference to another rule in the current grammar, or a regular expression\n\t * that consumes input.\n\t * \n\t * @param {InputBuffer} input\n\t * @param {Matchable} expression\n\t * @return {Object}\n\t */\n\tparseWithExpression(input, expression) {\n\n\t\t// Name of another rule in the grammar\n\t\tif (typeof expression === 'string') {\n\t\t\tlet rule = this.grammar.findRuleByName(expression);\n\t\t\treturn rule ? rule.accept(input, this) : null;\n\t\t}\n\n\t\t// A regular expression that must be matched\n\t\telse if (expression instanceof RegExp) {\n\t\t\tlet result = input.read(expression);\n\t\t\tif (result) {\n\t\t\t\treturn result[0];\n\t\t\t}\n\t\t}\n\n\t\t// An expression function to be executed\n\t\telse if (typeof expression === 'function') {\n\t\t\treturn expression(input, this);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ThymeleafExpressionLanguage from './ThymeleafExpressionLanguage';\nimport Parser                      from '../../parser/Parser';\n\n/**\n * Parses and executes Thymeleaf expressions.\n * \n * TODO: Create a shared instance of this for a processing context so that it\n *       doesn't need to be recreated over and over.\n * \n * @author Emanuel Rabina\n */\nexport default class ExpressionProcessor {\n\n\t/**\n\t * @param {Object} context\n\t */\n\tconstructor(context = {}) {\n\n\t\tthis.context = context;\n\t}\n\n\t/**\n\t * Parse and execute the given input as a Thymeleaf expression.\n\t * \n\t * @param {String} input\n\t * @return {*}\n\t */\n\tprocess(input) {\n\n\t\t// TODO: Probably don't need to create a new parser every time?\n\t\tlet parser = new Parser(ThymeleafExpressionLanguage);\n\t\tlet expressionAction = parser.parse(input);\n\t\treturn expressionAction ? expressionAction(this.context) : null;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common class for attribute processors.\n * \n * TODO: Do we even need a class for processors?  So far they all seem to be\n *       functions that execute based on a name match, which for all intents can\n *       be as simple as an object name/function pair!\n * \n * @author Emanuel Rabina\n */\nexport default class AttributeProcessor {\n\n\t/**\n\t * Constructor, sets this processor's prefix and name.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tthis.prefix = prefix;\n\t\tthis.name   = name;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\n\nimport {escapeHtml} from '@ultraq/string-utils';\n\n/**\n * JS equivalent of Thymeleaf's `th:attr` attribute processor, modifies or sets\n * a target attribute to whatever its associated expression evaluates to.\n * \n * @author Emanuel Rabina\n */\nexport default class AttrAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'attr';\n\n\t/**\n\t * Constructor, set this processor to use the `attr` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, AttrAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:attr` or `data-th-attr` attribute\n\t * on it, picking out the target attributes and setting them to whatever their\n\t * expressions evaluate to.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\t// TODO: This regex, is this some kind of value list that needs to be\n\t\t//       turned into an expression?\n\t\tif (/(.+=.+,)*.+=.+/.test(attributeValue)) {\n\t\t\tattributeValue.split(',').forEach(attribute => {\n\t\t\t\tlet attributeParts = attribute.split('=');\n\t\t\t\telement.setAttribute(attributeParts[0], escapeHtml(new ExpressionProcessor(context).process(attributeParts[1])));\n\t\t\t});\n\t\t}\n\t\t/* istanbul ignore next */\n\t\telse if (process.env.NODE_ENV !== 'test') {\n\t\t\tconsole.warn(`Value to ${attribute}, ${attributeValue}, doesn't seem to contain an attribute assignment expression.  Ignoring.`);\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\n\n/**\n * Thymeleaf's `th:checked` attribute processor, sets or removes the `checked`\n * attribute from an element based on the result of the expression within it.\n * \n * TODO: This is one of HTML5s \"boolean attributes\", attributes whose values are\n *       true simply by being present in the element, regardless of the value\n *       inside it.  To act as false, the attribute has to be removed.  Find a\n *       way to generate these from some list of boolean attributes so that I\n *       don't need to write a class for each one!\n * \n * @author Emanuel Rabina\n */\nexport default class CheckedAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'checked';\n\n\t/**\n\t * Constructor, set this processor to use the `checked` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, CheckedAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:checked` or `data-th-checked`\n\t * attribute on it, either setting or removing a `checked` attribute to the\n\t * current element based on the result of the inner expression.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet result = new ExpressionProcessor(context).process(attributeValue);\n\t\tif (result) {\n\t\t\telement.setAttribute('checked', '');\n\t\t}\n\t\telse {\n\t\t\telement.removeAttribute('checked');\n\t\t}\n\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\n\n/**\n * The `th:classappend` is a special attribute that applies the expression to\n * any existing classes already on an element.\n * \n * @author Emanuel Rabina\n */\nexport default class ClassAppendAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'classappend';\n\n\t/**\n\t * Constructor, set this processor to use the `attr` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, ClassAppendAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:classappend` or `data-th-classappend`\n\t * attribute on it, adding the resulting classes to any existing classes on\n\t * the current element.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet classes = new ExpressionProcessor(context).process(attributeValue);\n\t\tif (classes) {\n\t\t\telement.className += ` ${classes}`;\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\n\n/**\n * JS equivalent of Thymeleaf's `th:each` attribute processor, iterates over an\n * [iterable object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols),\n * executing a piece of template for every iteration.\n * \n * @author Emanuel Rabina\n */\nexport default class EachAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'each';\n\n\t/**\n\t * Constructor, set this processor to use the `each` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, EachAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:each`/`data-th-each` attribute,\n\t * repeating the markup for every object in the iterable value.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Boolean} Whether or not the parent element needs to do a second\n\t *   pass as its children have been modified by this processor.\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\n\t\tlet iterationInfo = new ExpressionProcessor(context).process(attributeValue);\n\t\tif (iterationInfo) {\n\t\t\tlet {localValueName, iterable} = iterationInfo;\n\t\t\tlet templateNode = element.cloneNode(true);\n\n\t\t\tfor (let value of iterable) {\n\t\t\t\tlet localClone = templateNode.cloneNode(true);\n\t\t\t\tlet localVariable = {};\n\t\t\t\tlocalVariable[localValueName] = value;\n\n\t\t\t\t// TODO: Standardize this data attribute somewhere.  Shared const?\n\t\t\t\t// element.dataset not yet implemented in JSDOM (https://github.com/tmpvar/jsdom/issues/961),\n\t\t\t\t// so until then we're setting data- attributes the old-fashioned way.\n\t\t\t\tlocalClone.setAttribute('data-thymeleaf-local-variables', JSON.stringify(localVariable));\n\n\t\t\t\telement.parentElement.appendChild(localClone);\n\t\t\t}\n\t\t}\n\t\telement.parentElement.removeChild(element);\n\n\t\treturn true;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\n\n/**\n * Configurable attribute processor that sets or empties an attribute value on\n * an element if the result of its expression is truthy or falsey respectively.\n * \n * @author Emanuel Rabina\n */\nexport default class EmptyableAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set the name of the attribute this processor will operate on.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tsuper(prefix, name);\n\t}\n\n\t/**\n\t * Processes an element that contains the configured attribute to be worked\n\t * on, setting it if the expression resolves to a truthy value, or removing it\n\t * if it resolves to a falsey value.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet value = new ExpressionProcessor(context).process(attributeValue);\n\t\telement.setAttribute(this.name, value ? value.toString() : '');\n\t\telement.removeAttribute(attribute);\n\t}\n}\n\nexport const EMPTYABLE_ATTRIBUTE_NAMES = [\n\t'href',\n\t'src',\n\t'value'\n];\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttributeProcessor from '../../processors/AttributeProcessor';\n\n/**\n * JS equivalent of Thymeleaf's `th:fragment` attribute processor, marks an\n * element as a template fragment that can be imported by other processors like\n * `th:insert`.\n * \n * @author Emanuel Rabina\n */\nexport default class FragmentAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'fragment';\n\n\t/**\n\t * Constructor, set this processor to use the `fragment` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, FragmentAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:fragment` or `data-th-fragment`\n\t * attribute on it.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\n\t\t// TODO: Some off-context mechanism for encountered fragments?\n\t\tif (!context.fragments) {\n\t\t\tcontext.fragments = [];\n\t\t}\n\t\tcontext.fragments.push({\n\t\t\tname:    attributeValue,\n\t\t\telement: element.cloneNode(true)\n\t\t});\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\nimport {clearChildren}     from '../../utilities/Dom';\n\n/**\n * JS equivalent of Thymeleaf's `th:if` attribute processor, includes or\n * excludes the current element and its children from rendering, depending on\n * the evaluation of the expression in the attribute value.\n * \n * @author Emanuel Rabina\n */\nexport default class IfAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'if';\n\n\t/**\n\t * Constructor, set this processor to use the `if` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, IfAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:if` or `data-th-if` attribute\n\t * on it, evaluating the expression for truthy/falsey, rendering/excluding the\n\t * element and its children based on the result.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet expressionResult = new ExpressionProcessor(context).process(attributeValue);\n\t\tif (!expressionResult) {\n\t\t\tclearChildren(element);\n\t\t\telement.parentNode.removeChild(element);\n\t\t}\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n","// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","/* \n * Copyright 2015, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n(function(root, factory) {\n\t'use strict';\n\n\t// AMD\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine('dumb-query-selector', [], factory);\n\t}\n\t// CommonJS\n\telse if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory();\n\t}\n\t// Global\n\telse {\n\t\tvar dumbQuerySelector = factory();\n\t\tObject.keys(dumbQuerySelector).forEach(function(key) {\n\t\t\troot[key] = dumbQuerySelector[key];\n\t\t});\n\t}\n})(this, function() {\n\t'use strict';\n\n\treturn {\n\n\t\t/**\n\t\t * An element selector and shortcut for `(document/element).querySelector`.\n\t\t * \n\t\t * @param {String} query\n\t\t * @param {Node} [scope=document]\n\t\t *   The scope to limit the search to for non-ID queries.  Defaults to\n\t\t *   `document` scope.\n\t\t * @return {Element} The matching element, or `null` if no match is found.\n\t\t */\n\t\t$: function(query, scope) {\n\t\t\treturn (scope || document).querySelector(query);\n\t\t},\n\n\t\t/**\n\t\t * An element list selector, returning an array of elements because\n\t\t * `NodeList`s are dumb.\n\t\t * \n\t\t * @param {String} query\n\t\t * @param {Node} [scope=document]\n\t\t *   The scope to limit the search to for non-ID queries.  Defaults to\n\t\t *   `document` scope.\n\t\t * @return {Array} The list of matching elements.\n\t\t */\n\t\t$$: function(query, scope) {\n\t\t\treturn Array.prototype.slice.call((scope || document).querySelectorAll(query));\n\t\t}\n\t};\n});\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FragmentAttributeProcessor from './FragmentAttributeProcessor';\nimport StandardDialect                    from '../StandardDialect';\nimport ExpressionProcessor                from '../expressions/ExpressionProcessor';\nimport AttributeProcessor                 from '../../processors/AttributeProcessor';\nimport {clearChildren, deserialize}       from '../../utilities/Dom';\n\nimport {$} from 'dumb-query-selector';\n\n/**\n * JS equivalent of Thymeleaf's `th:insert` attribute processor, inserts the\n * referenced template fragment as a child of the current element.\n * \n * @author Emanuel Rabina\n */\nexport default class InsertAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'insert';\n\n\t/**\n\t * Constructor, set this processor to use the `insert` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, InsertAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:insert`/`data-th-insert` attribute,\n\t * replacing the current element's children with the DOM in the referenced\n\t * fragment.\n\t * \n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t * @return {Promise<Boolean>} Whether or not the parent element needs to do a\n\t *   second pass as its children have been modified by this processor.\n\t */\n\tasync process(element, attribute, attributeValue, context) {\n\n\t\telement.removeAttribute(attribute);\n\t\tclearChildren(element);\n\n\t\tlet {templateResolver} = context;\n\t\tif (templateResolver) {\n\t\t\tlet fragmentInfo = new ExpressionProcessor(context).process(attributeValue);\n\t\t\tif (fragmentInfo) {\n\t\t\t\tlet {templateName, fragmentName} = fragmentInfo;\n\t\t\t\tlet template = deserialize(await templateResolver(templateName));\n\n\t\t\t\tlet standardDialect = context.dialects.find(dialect => dialect.name === StandardDialect.NAME);\n\t\t\t\tlet dialectPrefix = standardDialect.prefix;\n\t\t\t\tlet fragmentProcessorName = FragmentAttributeProcessor.NAME;\n\t\t\t\tlet fragment =\n\t\t\t\t\t$(`[${dialectPrefix}\\\\:${fragmentProcessorName}^=\"${fragmentName}\"]`, template) ||\n\t\t\t\t\t$(`[data-${dialectPrefix}-${fragmentProcessorName}^=\"${fragmentName}\"`, template);\n\n\t\t\t\telement.appendChild(fragment);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.log(`No template resolver configured, unable to locate fragment via ${attributeValue} processor`);\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","/* \n * Copyright 2018, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\n\n/**\n * Configurable attribute processor that sets or removes an attribute on an\n * element if the result of its expression is truthy or falsey respectively.\n * \n * @author Emanuel Rabina\n */\nexport default class RemovableAttributeProcessor extends AttributeProcessor {\n\n\t/**\n\t * Constructor, set the name of the attribute this processor will operate on.\n\t * \n\t * @param {String} prefix\n\t * @param {String} name\n\t */\n\tconstructor(prefix, name) {\n\n\t\tsuper(prefix, name);\n\t}\n\n\t/**\n\t * Processes an element that contains the configured attribute to be worked\n\t * on, setting it if the expression resolves to a truthy value, or removing it\n\t * if it resolves to a falsey value.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\tlet value = new ExpressionProcessor(context).process(attributeValue);\n\t\tif (value) {\n\t\t\telement.setAttribute(this.name, value.toString());\n\t\t}\n\t\telse {\n\t\t\telement.removeAttribute(this.name);\n\t\t}\n\n\t\telement.removeAttribute(attribute);\n\t}\n}\n\nexport const REMOVABLE_ATTRIBUTE_NAMES = [\n\t'class'\n];\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\n\n/**\n * JS equivalent of Thymeleaf's `th:text` attribute processor, applies the\n * expression in the attribute value to the text content of the element being\n * processed, escaping any unsafe input.\n * \n * @author Emanuel Rabina\n */\nexport default class TextAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'text';\n\n\t/**\n\t * Constructor, set this processor to use the `text` name and supplied prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, TextAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:text` or `data-th-text` attribute\n\t * on it, taking the text expression in the value and applying it to the text\n\t * content of the element.\n\t * \n\t * @param {Element} element \n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.textContent = new ExpressionProcessor(context).process(attributeValue);\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpressionProcessor from '../expressions/ExpressionProcessor';\nimport AttributeProcessor  from '../../processors/AttributeProcessor';\n\n/**\n * JS equivalent of Thymeleaf's `th:utext` attribute processor, applies the\n * expression in the attribute value to the text content of the element being\n * processed.\n * \n * @author Emanuel Rabina\n */\nexport default class UTextAttributeProcessor extends AttributeProcessor {\n\n\tstatic NAME = 'utext';\n\n\t/**\n\t * Constructor, set this processor to use the `utext` name and supplied\n\t * prefix.\n\t * \n\t * @param {String} prefix\n\t */\n\tconstructor(prefix) {\n\n\t\tsuper(prefix, UTextAttributeProcessor.NAME);\n\t}\n\n\t/**\n\t * Processes an element that contains a `th:utext` or `data-th-utext`\n\t * attribute on it, taking the text expression in the value and applying it to\n\t * the text content of the element.\n\t *\n\t * @param {Element} element\n\t *   Element being processed.\n\t * @param {String} attribute\n\t *   The attribute that was encountered to invoke this processor.\n\t * @param {String} attributeValue\n\t *   The value given by the attribute.\n\t * @param {Object} context\n\t */\n\tprocess(element, attribute, attributeValue, context) {\n\n\t\telement.innerHTML = new ExpressionProcessor(context).process(attributeValue);\n\t\telement.removeAttribute(attribute);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Common class for dialects.\n * \n * @author Emanuel Rabina\n */\nexport default class Dialect {\n\n\t/**\n\t * Constructor, sets this dialect's name and prefix.\n\t * \n\t * @param {String} name\n\t * @param {String} prefix\n\t */\n\tconstructor(name, prefix) {\n\n\t\tthis.name   = name;\n\t\tthis.prefix = prefix;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport AttrAttributeProcessor        from './processors/AttrAttributeProcessor';\nimport CheckedAttributeProcessor     from './processors/CheckedAttributeProcessor';\nimport ClassAppendAttributeProcessor from './processors/ClassAppendAttributeProcessor';\nimport EachAttributeProcessor        from './processors/EachAttributeProcessor';\nimport EmptyableAttributeProcessor,\n\t{EMPTYABLE_ATTRIBUTE_NAMES}        from './processors/EmptyableAttributeProcessor';\nimport FragmentAttributeProcessor    from './processors/FragmentAttributeProcessor';\nimport IfAttributeProcessor          from './processors/IfAttributeProcessor';\nimport InsertAttributeProcessor      from './processors/InsertAttributeProcessor';\nimport RemovableAttributeProcessor,\n\t{REMOVABLE_ATTRIBUTE_NAMES}        from './processors/RemovableAttributeProcessor';\nimport TextAttributeProcessor        from './processors/TextAttributeProcessor';\nimport UTextAttributeProcessor       from './processors/UTextAttributeProcessor';\nimport Dialect                       from '../dialects/Dialect';\n\n/**\n * The out-of-the-box dialect for Thymeleaf, the \"Standard Dialect\".\n * \n * @author Emanuel Rabina\n */\nexport default class StandardDialect extends Dialect {\n\n\tstatic NAME           = 'Standard';\n\tstatic DEFAULT_PREFIX = 'thjs';\n\n\t/**\n\t * Create an instance of this dialect with the name \"Standard\" and\n\t * given prefix, defaulting to \"th\" if not supplied.\n\t * \n\t * @param {String} [prefix='thjs']\n\t */\n\tconstructor(prefix = StandardDialect.DEFAULT_PREFIX) {\n\n\t\tsuper(StandardDialect.NAME, prefix);\n\t}\n\n\t/**\n\t * Returns the supported standard processors.\n\t * \n\t * @return {Array} A list of the processors included in this dialect.\n\t */\n\tget processors() {\n\n\t\t// TODO: This is a very basic way of imposing the order of attribute\n\t\t//       processors.  It's currently ordered in the same way as OG\n\t\t//       Thymeleaf.  Figure out a 'proper' way to do the ordering.\n\n\t\t// Order taken from https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#attribute-precedence\n\t\tlet {prefix} = this;\n\t\treturn [].concat(\n\t\t\t// Fragment inclusion\n\t\t\tnew InsertAttributeProcessor(prefix),\n\n\t\t\t// Fragment iteration\n\t\t\tnew EachAttributeProcessor(prefix),\n\n\t\t\t// Conditional evaluation\n\t\t\tnew IfAttributeProcessor(prefix),\n\n\t\t\t// Local variable definition\n\t\t\tnew AttrAttributeProcessor(prefix),\n\t\t\tnew ClassAppendAttributeProcessor(prefix),\n\n\t\t\t// General attribute modification\n\t\t\tEMPTYABLE_ATTRIBUTE_NAMES.map(attributeName => {\n\t\t\t\treturn new EmptyableAttributeProcessor(prefix, attributeName);\n\t\t\t}),\n\t\t\tREMOVABLE_ATTRIBUTE_NAMES.map(attributeName => {\n\t\t\t\treturn new RemovableAttributeProcessor(prefix, attributeName);\n\t\t\t}),\n\n\t\t\t// Specific attribute modification\n\t\t\tnew CheckedAttributeProcessor(prefix),\n\n\t\t\t// Text\n\t\t\tnew TextAttributeProcessor(prefix),\n\t\t\tnew UTextAttributeProcessor(prefix),\n\n\t\t\t// Fragment specification\n\t\t\tnew FragmentAttributeProcessor(prefix)\n\n\t\t\t// Fragment removal\n\t\t);\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StandardDialect from './standard/StandardDialect';\n\n/**\n * Configuration object for the template engine.\n * \n * @typedef {Object} Configuration\n * @property {Array<Dialect>} dialects\n *   A list of dialects to include with this instance of the template engine.\n * @property {Object} [isomorphic]\n *   An object which configures the isomorphic capabilities of the template\n *   engine.\n * @property {Function} templateResolver\n *   A function for returning the text of templates named by fragment\n *   expressions in templates.  Is given only 1 argument, the template name from\n *   a fragment expression, and should return a Promise of the template text.\n */\n\n/**\n * Default configuration for the template engine, configures the standard\n * dialect with no options (uses `thjs` as the prefix).\n * \n * @type {Configuration}\n */\nexport const DEFAULT_CONFIGURATION = {\n\tdialects: [\n\t\tnew StandardDialect()\n\t]\n};\n\n/**\n * Standard configuration, configures the standard dialect with the `th` prefix\n * and enables isomorphic mode which enables the ability to use much of the same\n * processors across original Thymeleaf and ThymeleafJS.\n * \n * @type {Configuration}\n */\nexport const STANDARD_CONFIGURATION = {\n\t...DEFAULT_CONFIGURATION,\n\tdialects: [\n\t\tnew StandardDialect('th')\n\t],\n\tisomorphic: {\n\t\tprefix: 'thjs'\n\t}\n};\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Matcher {\n\n\t/**\n\t * Create a matcher to work with the current context and isomorphic processing\n\t * settings.\n\t * \n\t * @param {Object} context\n\t * @param {Object} isomorphic\n\t */\n\tconstructor(context, isomorphic) {\n\n\t\tthis.context    = context;\n\t\tthis.isomorphic = isomorphic;\n\t}\n\n\t/**\n\t * Return the matching attribute of an element that a processor can work over.\n\t * \n\t * @param {Element} element\n\t * @param {AttributeProcessor} processor\n\t * @return {String}\n\t *   The attribute that matched processing by this processor, or `null` if no\n\t *   match was found.\n\t */\n\tmatches(element, processor) {\n\n\t\tlet prefixes = [].concat(\n\t\t\tthis.isomorphic ? this.isomorphic.prefix : [],\n\t\t\tprocessor.prefix\n\t\t);\n\t\tlet {name} = processor;\n\n\t\tfor (let prefix of prefixes) {\n\t\t\tlet attribute;\n\t\t\tattribute = `${prefix}:${name}`;\n\t\t\tif (element.hasAttribute(attribute)) {\n\t\t\t\treturn attribute;\n\t\t\t}\n\t\t\tattribute = `data-${prefix}-${name}`;\n\t\t\tif (element.hasAttribute(attribute)) {\n\t\t\t\treturn attribute;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n","/* \n * Copyright 2017, Emanuel Rabina (http://www.ultraq.net.nz/)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DEFAULT_CONFIGURATION}  from './Configurations';\nimport Matcher                  from './processors/Matcher';\nimport StandardDialect          from './standard/StandardDialect';\nimport {promisify}              from './utilities/Functions';\nimport {deserialize, serialize} from './utilities/Dom';\n\nimport {flatten} from '@ultraq/array-utils';\nimport {merge}   from '@ultraq/object-utils';\n\nconst XML_NAMESPACE_ATTRIBUTE = `xmlns:${StandardDialect.DEFAULT_PREFIX}`;\n\n/**\n * A highly-configurable class responsible for processing the Thymeleaf\n * directives found in HTML documents and fragments.\n * \n * @author Emanuel Rabina\n */\nexport default class TemplateEngine {\n\n\t/**\n\t * Constructor, set up a new template engine instance.\n\t * \n\t * @param {Object} config\n\t */\n\tconstructor({dialects, isomorphic, templateResolver} = DEFAULT_CONFIGURATION) {\n\n\t\tthis.dialects         = dialects;\n\t\tthis.isomorphic       = isomorphic;\n\t\tthis.processors       = flatten(dialects.map(dialect => dialect.processors));\n\t\tthis.templateResolver = templateResolver;\n\t}\n\n\t/**\n\t * Process the Thymeleaf template data, returning the processed template.\n\t * \n\t * @param {String} template\n\t * @param {Object} [context={}]\n\t * @return {Promise<String>}\n\t *   A promise resolved with the processed template, or rejected with an error\n\t *   message.\n\t */\n\tprocess(template, context = {}) {\n\n\t\tlet document = deserialize(template);\n\t\tlet rootElement = document.firstElementChild;\n\t\treturn this.processNode(rootElement, {\n\t\t\t...context,\n\t\t\tdialects:         this.dialects,\n\t\t\ttemplateResolver: this.templateResolver\n\t\t})\n\t\t\t.then(() => {\n\t\t\t\t// TODO: Special case, remove the xmlns:th namespace from the document.\n\t\t\t\t//       This should be handled like in main Thymeleaf where it's just\n\t\t\t\t//       another processor that runs on the document.\n\t\t\t\tif (rootElement.hasAttribute(XML_NAMESPACE_ATTRIBUTE)) {\n\t\t\t\t\trootElement.removeAttribute(XML_NAMESPACE_ATTRIBUTE);\n\t\t\t\t}\n\t\t\t\treturn serialize(document);\n\t\t\t});\n\t}\n\n\t/**\n\t * Process the Thymeleaf template at the given path, returning a promise of the\n\t * processed template.\n\t * \n\t * @param {String} filePath\n\t * @param {Object} [context={}]\n\t * @return {Promise<String>}\n\t *   A promise resolved with the processed template, or rejected with an error\n\t *   message.\n\t */\n\tprocessFile(filePath, context = {}) {\n\n\t\t/* global ENVIRONMENT */\n\t\treturn ENVIRONMENT === 'browser' ?\n\t\t\tPromise.reject(new Error('Cannot use fs.readFile inside a browser')) :\n\t\t\tpromisify(require('fs').readFile)(filePath)\n\t\t\t\t.then(data => {\n\t\t\t\t\treturn this.process(data, context);\n\t\t\t\t});\n\t}\n\n\t/**\n\t * Process a DOM element.\n\t * \n\t * @private\n\t * @param {Element} element\n\t * @param {Object} [context={}]\n\t * @return {Promise<Boolean>} Whether or not the parent node needs reprocessing.\n\t */\n\tasync processNode(element, context = {}) {\n\n\t\t// TODO: Standardize this data attribute somewhere.  Shared const?\n\t\t// element.dataset not yet implemented in JSDOM (https://github.com/tmpvar/jsdom/issues/961),\n\t\t// so until then we're getting data- attributes the old-fashioned way.\n\t\t// Alternatively, some kind of variable stack that pops with each move up\n\t\t// the DOM.\n\t\tlet localVariables = JSON.parse(element.getAttribute('data-thymeleaf-local-variables'));\n\t\telement.removeAttribute('data-thymeleaf-local-variables');\n\t\tlet localContext = merge({}, context, localVariables);\n\t\tlet matcher = new Matcher(context, this.isomorphic);\n\n\t\t// Process the current element, store whether or not reprocessing of the\n\t\t// parent needs to happen before moving on to this element's children.\n\t\tlet requireReprocessing = false;\n\t\tfor (let processor of this.processors) {\n\t\t\tlet attribute = matcher.matches(element, processor);\n\t\t\tlet processorResult = attribute ?\n\t\t\t\tawait processor.process(element, attribute, element.getAttribute(attribute), localContext) :\n\t\t\t\tfalse;\n\t\t\trequireReprocessing = requireReprocessing || processorResult;\n\t\t}\n\n\t\tif (requireReprocessing) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Process this element's children\n\t\tlet reprocess;\n\t\tdo {\n\t\t\treprocess = false;\n\t\t\tfor (let child of element.children) {\n\t\t\t\treprocess = await this.processNode(child, localContext);\n\t\t\t\tif (reprocess) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twhile (reprocess);\n\t}\n}\n"],"names":["defaultMatchProcessor","result","flatten","array","reduce","accumulator","value","concat","Array","isArray","remove","predicate","find","item","index","splice","merge","target","sources","forEach","source","keys","key","targetValue","sourceValue","Object","navigate","object","path","split","previousValue","pathToken","escapeHtml","string","replace","clearChildren","element","firstChild","removeChild","deserialize","htmlString","ENVIRONMENT","createRange","createContextualFragment","serialize","documentFragment","XMLSerializer","serializeToString","AllInput","ruleName","input","parser","matchResult","parseWithExpression","exhausted","Grammar","name","startingRule","additionalRules","rules","this","accept","rule","Error","Optional","expression","markAndClearOrReset","OrderedChoice","expressions","Sequence","results","push","InputBuffer","position","positionStack","undefined","pop","length","func","mark","clear","reset","pattern","remaining","substring","leadingWhitespace","match","RegExp","exec","startsWith","newPosition","Rule","matchProcessor","identifier","context","matchers","read","parseResults","i","parseResult","RegularExpression","url","parameters","expressionProcessor","ExpressionProcessor","paramsList","slice","map","param","lhs","rhs","process","urlTemplate","head","placeholder","tail","paramEntry","join","templateName","fragmentName","localValueName","iterationStatusVariable","collectionExpressionAction","OneOrMore","first","rest","coerce","toString","parseFloat","leftOperand","comparator","rightOperand","condition","truthyExpression","falseyExpression","Parser","grammar","inputBuffer","errorMessage","env","NODE_ENV","error","findRuleByName","expressionAction","ThymeleafExpressionLanguage","parse","AttributeProcessor","prefix","AttrAttributeProcessor","NAME","attribute","attributeValue","test","attributeParts","setAttribute","warn","removeAttribute","CheckedAttributeProcessor","ClassAppendAttributeProcessor","classes","className","EachAttributeProcessor","iterationInfo","iterable","templateNode","cloneNode","localClone","localVariable","JSON","stringify","parentElement","appendChild","EmptyableAttributeProcessor","EMPTYABLE_ATTRIBUTE_NAMES","FragmentAttributeProcessor","fragments","IfAttributeProcessor","parentNode","global","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","prototype","Generator","generator","create","Context","_invoke","makeInvokeMethod","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","method","AsyncIterator","invoke","resolve","reject","record","hasOwn","Promise","__await","then","unwrapped","previousPromise","callInvokeWithMethodAndArg","state","GenStateSuspendedStart","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","done","GenStateSuspendedYield","iterator","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","values","iteratorMethod","iteratorSymbol","isNaN","Op","hasOwnProperty","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","runtime","regeneratorRuntime","module","exports","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","async","iter","reverse","skipTempReset","prev","charAt","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","Function","g","hadRuntime","getOwnPropertyNames","indexOf","oldRuntime","require","e","root","factory","dumbQuerySelector","query","scope","document","querySelector","querySelectorAll","InsertAttributeProcessor","templateResolver","fragmentInfo","dialects","dialect","StandardDialect","standardDialect","$","dialectPrefix","fragmentProcessorName","template","fragment","log","RemovableAttributeProcessor","REMOVABLE_ATTRIBUTE_NAMES","TextAttributeProcessor","textContent","UTextAttributeProcessor","innerHTML","Dialect","DEFAULT_PREFIX","attributeName","DEFAULT_CONFIGURATION","STANDARD_CONFIGURATION","Matcher","isomorphic","processor","prefixes","hasAttribute","XML_NAMESPACE_ATTRIBUTE","TemplateEngine","processors","rootElement","firstElementChild","processNode","filePath","getAttribute","localVariables","_this","matcher","matches","localContext","requireReprocessing","processorResult","children","child","reprocess"],"mappings":"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"}